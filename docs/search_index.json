[
["index.html", "Data Analytics in RStudio Preface", " Data Analytics in RStudio Gaurav Satav 2018-06-07 Preface This document is an attempt to provide the reader with a walkthrough into how a typical analysis is carried out using R Studios. "],
["introduction.html", "Chapter 1 Introduction 1.1 The R Language 1.2 R Studios", " Chapter 1 Introduction Lets take a Moment Organisations collect data that they have gathered from customers, businesses, economy and practical experience. Data is then processed after gathering and is categorised as per the requirement and analysis is done to study purchase patterns and etc. It has always been important to know ones customer and have an understanding of the market one is operating in, but it has only been in recent years that we’ve experience a tremendous acceleration in the rate of data generation. The idea is to make sense of the data you have, to analyse it and share better business prospects in the near future and how you’re going to do it, is with the concepts of analytics. It is the science of extracting trends, patterns and useful information from a set of existing data which will be of no use if not analysed. It is a kind of business intelligence that is now used for gaining profits and making better use of resources. This can also help in improving managerial operations and leverage organisations to next level. If not analysed this data is going to get wasted whereas if analysed properly this data can help us in finding information that is powerful to bring in a change in the patterns of how business is already working or going. 1.1 The R Language R is a free software environment for statistical computing and graphics. It compiles and runs on a wide variety of UNIX platforms, Windows and MacOS. The R environment R is an integrated suite of software facilities for data manipulation, calculation and graphical display. Among other things it has an effective data handling and storage facility, a suite of operators for calculations on arrays, in particular matrices, a large, coherent, integrated collection of intermediate tools for data analysis, graphical facilities for data analysis and display either directly at the computer or on hardcopy, and a well developed, simple and effective programming language (called ‘S’) which includes conditionals, loops, user defined recursive functions and input and output facilities. (Indeed most of the system supplied functions are themselves written in the S language.) The term “environment” is intended to characterize it as a fully planned and coherent system, rather than an incremental accretion of very specific and inflexible tools, as is frequently the case with other data analysis software. R is very much a vehicle for newly developing methods of interactive data analysis. It has developed rapidly, and has been extended by a large collection of packages. However, most programs written in R are essentially ephemeral, written for a single piece of data analysis. You can get yourself aquainted with the basics of R by visiting this link You can download R by clicking the link here. 1.2 R Studios RStudio is an integrated development environment (IDE) for R. It includes a console, syntax-highlighting editor that supports direct code execution, as well as tools for plotting, history, debugging and workspace management. RStudio is available in open source and commercial editions and runs on the desktop (Windows, Mac, and Linux) or in a browser connected to RStudio Server or RStudio Server Pro (Debian/Ubuntu, RedHat/CentOS, and SUSE Linux). Downloading R Studios Before downloading R Studios make sure you have R installed on your system. If not the refer the previous page for the link Basically there are two version of RStudio ( whats the difference? ) Desktop Version Server Version We recommend installation of the server version or R Studio and once its installed we can access it using our browser at port 8787 Click here to install R Studio for linux. "],
["setting-up-a-project.html", "Chapter 2 Setting up a Project 2.1 Github Integration", " Chapter 2 Setting up a Project Before we start with our analysis, we’ll start off by setting up a project. Setting up a project helps us in the following ways Keeping track of all the files and variables which are created in between our executions. It also helps us to reproduce our work and keep a track of all the libraries upon which our code relies upon (see packrat). It allows us to enable version control. 2.1 Github Integration Version control helps software teams manage changes to source code over time. Version control software keeps track of every modification to the code in a special kind of database. If a mistake is made, developers can turn back the clock and compare earlier versions of the code to help fix the mistake while minimizing disruption to all team members. Version control systems have been around for a long time but continue to increase in popularity with data science workflows. The RStudio IDE has integrated support for version control which would help us keep track of our changes and push them onto Github. We’ll now quickly look at how to setup a git version controlling environment within R Studio. Create an account on github : First you’ll need to create an account on github. Create a repository : Once you’re done creating an account, click on the New Repository option and create a repository there. Generally the name of the repository is the name of the project. Download and install git locally : Now you’ll need to install git locally on your machine. You can download it from the official git website Update Global Options in R Studio : Once you’ve installed git, navigate to the Tools –&gt; Global Options –&gt; GIT/SVN options and within the Git Executable provide the link to git executable file and of the SVN path.(by default it will be C:/Program Files/Git/bin/git.exe and C:/Users/user_name/Documents respectively) Clone Github Repository : Now within your filesystem, navigate to a new repository and type the following command git clone https://github.com/YOUR-USERNAME/YOUR-REPOSITORY.git Initialize the current directory with a R Project : In R Studio, navigate to the New Project option and choose the Existing Directory option to make the curret git directory as your project directory. Check git origin : Ensure that the name of the origin path is set correctly. Type the below command in cmd prompt. git remote show origin Make changes,commit and push : Now you can try making changes into the repository by either adding new files or modifying the existing README file. To commit all the changes, type git add -A git commit -m &quot;A commit from my local computer&quot; git push At this point you’ll be asked to enter your github username and password. Once you’ve entered that the changes which you’ve made in this commit will get pushed onto the github repository. Additional Resource Using Version Control with RStudio Happy Git and GitHub for the userR "],
["preparing-the-canvas.html", "Chapter 3 Preparing the Canvas 3.1 R Markdown 3.2 Dashboards 3.3 Blog 3.4 Books 3.5 Web Applications.", " Chapter 3 Preparing the Canvas Consider the following scenario, you are asked to perform analysis on some data, we would all agree that it would be a tedious task to complete our analysis using the command line interface. The RStudio IDE (or any IDE for that matter) provides us with the freedom to reproduce the execution of our code sequentially to be executed on someone else along with host of other important advantage. Now as it happens at the end of most analysis we are required to produce a report to be shared. This report in general takes one of the following forms. A Spreadsheet. A text document. A powerpoint presentation. thinking on similar lines as we did while comparing the CMD line to a text editor we see that it would really be a tedious job to produce reports especially if the reports are going to be repetative and similar in nature.Before we start writing a single line of code, I encourage you to ask yourself, what is my output file format going to be ?. Beginning at the end. R Studio provides us with the following (along with many other) output formats in which we can share our analysis. R Markdown Dashboards Web Pages (Blogs and Books) Web Applications We’ll skim on the surface of each of these output formats in the following chapters. 3.1 R Markdown This is an R Markdown document. Markdown is a simple formatting syntax for authoring HTML, PDF, and MS Word documents. For more details on using R Markdown see http://rmarkdown.rstudio.com. When you click the Knit button a document will be generated that includes both content as well as the output of any embedded R code chunks within the document. You can embed an R code chunk like this: summary(cars) ## speed dist ## Min. : 4.0 Min. : 2.00 ## 1st Qu.:12.0 1st Qu.: 26.00 ## Median :15.0 Median : 36.00 ## Mean :15.4 Mean : 42.98 ## 3rd Qu.:19.0 3rd Qu.: 56.00 ## Max. :25.0 Max. :120.00 3.1.0.1 Including Plots You can also embed plots, for example: Note that the echo = FALSE parameter was added to the code chunk to prevent printing of the R code that generated the plot. All in all R Markdown makes your code look awesome 3.2 Dashboards Dashboards are a great tool to represent live data or data in forms of reports. The flexdashboard library allows us to do just that. It enables you to easily create flexible, attractive, interactive dashboards with R. Authoring and customization of dashboards is done using R Markdown and you can optionally include Shiny(more on it later) components for additional interactivity. Highlights of the flexdashboard package include: Support for a wide variety of components including interactive htmlwidgets; base, lattice, and grid graphics; tabular data; gauges; and value boxes. Flexible and easy to specify row and column-based layouts. Components are intelligently re-sized to fill the browser and adapted for display on mobile devices. Extensive support for text annotations to include assumptions, contextual narrative, and analysis within dashboards. Storyboard layouts for presenting sequences of visualizations and related commentary. By default dashboards are standard HTML documents that can be deployed on any web server or even attached to an email message. You can optionally add Shiny components for additional interactivity and then deploy on Shiny Server or shinyapps.io. You can explore the gallery of the dashboards at https://rmarkdown.rstudio.com/flexdashboard/examples.html Additional learning resource is here 3.3 Blog It so often happens that we continue to learn new things and we tend to forget them due to one reasons like Not having a chance to apply them regularly or more. Maintaining a blog helps us to write in our own words what it is that we’ve learned and also it can help you showcase your knowledge to someone when asked upon. Blogdown is an awesome tool developed by Yihui Xi which makes our lives a whole lot easier to create, maintain and update our own blog. Its a bit of a trouble at start, but once you get going you come to see its effectiveness. Once we create our blog we can then choose to host it either on Github Pages or on Netlify. Additional Resources blogdown: Creating Websites with R Markdown Building a blog with blogdown 3.4 Books Similar to the blogdown package, bookdown as the name suggest is used for writing books. The book you’re currently reading was written using the same package. Additional Resources - bookdown: Authoring Books and Technical Documents with R Markdown 3.5 Web Applications. Shiny is an R package that makes it easy to build interactive web applications (apps) straight from R. A simple example of the application is seen here This application is hosted on the https://www.shinyapps.io/ server . Additional Resources Learn Shiny "]
]
